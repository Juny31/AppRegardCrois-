{"ast":null,"code":"var _jsxFileName = \"/Users/djsambolebindzi/Documents/AppRegardCrois-/dashboard-collaboratif/src/components/TaskBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskBoard({\n  token\n}) {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // -- Charger les tâches --\n  useEffect(() => {\n    fetch(\"http://localhost:4000/tasks\", {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(r => r.json()).then(setTasks);\n  }, [token]);\n\n  // -- Ajouter tâche --\n  async function addTask() {\n    const title = prompt(\"Titre de la tâche ?\");\n    if (!title) return;\n    const resp = await fetch(\"http://localhost:4000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      },\n      body: JSON.stringify({\n        title,\n        done: false\n      })\n    });\n    if (resp.ok) setTasks(async tasks => [...tasks, await resp.json()]);\n  }\n\n  // -- Toggle done --\n  async function toggleDone(task) {\n    const resp = await fetch(`http://localhost:4000/tasks/${task.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      },\n      body: JSON.stringify({\n        done: !task.done\n      })\n    });\n    if (resp.ok) {\n      const updated = await resp.json();\n      setTasks(tasks => tasks.map(t => t.id === task.id ? updated : t));\n    }\n  }\n\n  // -- Supprimer tâche --\n  async function removeTask(id) {\n    if (!window.confirm(\"Supprimer ?\")) return;\n    const resp = await fetch(`http://localhost:4000/tasks/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    });\n    if (resp.ok) setTasks(tasks => tasks.filter(t => t.id !== id));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"T\\xE2ches\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTask,\n      children: \"Ajouter une t\\xE2che\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: task.done,\n          onChange: () => toggleDone(task)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), task.title, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => removeTask(task.id),\n          style: {\n            marginLeft: 8,\n            color: \"red\"\n          },\n          children: \"Supprimer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskBoard, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskBoard;\nexport default TaskBoard;\nvar _c;\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TaskBoard","token","_s","tasks","setTasks","fetch","headers","Authorization","then","r","json","addTask","title","prompt","resp","method","body","JSON","stringify","done","ok","toggleDone","task","id","updated","map","t","removeTask","window","confirm","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","checked","onChange","style","marginLeft","color","_c","$RefreshReg$"],"sources":["/Users/djsambolebindzi/Documents/AppRegardCrois-/dashboard-collaboratif/src/components/TaskBoard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction TaskBoard({ token }) {\n  const [tasks, setTasks] = useState([]);\n\n  // -- Charger les tâches --\n  useEffect(() => {\n    fetch(\"http://localhost:4000/tasks\", {\n      headers: { Authorization: \"Bearer \" + token },\n    })\n      .then((r) => r.json())\n      .then(setTasks);\n  }, [token]);\n\n  // -- Ajouter tâche --\n  async function addTask() {\n    const title = prompt(\"Titre de la tâche ?\");\n    if (!title) return;\n    const resp = await fetch(\"http://localhost:4000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      },\n      body: JSON.stringify({ title, done: false }),\n    });\n    if (resp.ok) setTasks(async (tasks) => [...tasks, await resp.json()]);\n  }\n\n  // -- Toggle done --\n  async function toggleDone(task) {\n    const resp = await fetch(`http://localhost:4000/tasks/${task.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      },\n      body: JSON.stringify({ done: !task.done }),\n    });\n    if (resp.ok) {\n      const updated = await resp.json();\n      setTasks(tasks => tasks.map(t => t.id === task.id ? updated : t));\n    }\n  }\n\n  // -- Supprimer tâche --\n  async function removeTask(id) {\n    if (!window.confirm(\"Supprimer ?\")) return;\n    const resp = await fetch(`http://localhost:4000/tasks/${id}`, {\n      method: \"DELETE\",\n      headers: { Authorization: \"Bearer \" + token },\n    });\n    if (resp.ok) setTasks(tasks => tasks.filter(t => t.id !== id));\n  }\n\n  return (\n    <div>\n      <h3>Tâches</h3>\n      <button onClick={addTask}>Ajouter une tâche</button>\n      <ul>\n        {tasks.map(task =>\n          <li key={task.id}>\n            <input type=\"checkbox\" checked={task.done} onChange={() => toggleDone(task)} />\n            {task.title}\n            <button onClick={() => removeTask(task.id)} style={{ marginLeft: 8, color: \"red\" }}>Supprimer</button>\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default TaskBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}